Class kutac.monitor.utils.Installer
{

XData Install [ XMLNamespace = INSTALLER ]
{
<Manifest>
<IfNotDef Var="Namespace">
<Var Name="Namespace" Value="SYSMON"/>
<Log Text="Set namespace to ${Namespace}" Level="0"/>
</IfNotDef>


<If Condition='(##class(Config.Namespaces).Exists("${Namespace}")=0)'>
<Log Text="Creating namespace ${Namespace}" Level="0"/>

<Namespace Name="${Namespace}" Create="yes" Code="${Namespace}" Ensemble="" Data="${Namespace}">
<Log Text="Creating database ${Namespace}" Level="0"/>

<Configuration>
<Database Name="${Namespace}" Dir="${MGRDIR}/${Namespace}" Create="yes" MountRequired="true" Resource="%DB_${Namespace}" PublicPermissions="RW" MountAtStartup="true"/>
</Configuration>

<Log Text="End creating database ${Namespace}" Level="0"/>
</Namespace>

 <Log Text="End creating namespace ${Namespace}" Level="0"/>
</If>


<If Condition='(##class(Security.Applications).Exists($ZCONVERT("/csp/${Namespace}", "L"))=0)'>
<Namespace Name="${Namespace}" Create="no">
<Log Text="Creating web application /csp/${Namespace}" Level="0"/>

<CSPApplication Url='#{$ZCONVERT("/csp/${Namespace}", "L")}' Directory='#{##class(%DeepSee.Report.UI.reportModelServer).GetCSPDirectory()_$ZCONVERT("${Namespace}", "L")}' AuthenticationMethods="64" IsNamespaceDefault="true" Recurse="true"/>
<RunInstall Class="kutac.monitor.utils.Installer" Method="EnableDeepSee"/>

<Log Text="End creating web application /csp/${Namespace}" Level="0"/>
</Namespace>
</If>


<Namespace Name="${Namespace}" Create="no">
<IfDef Var="SourceDir">
<Log Text="SourceDir defined - offline install from ${SourceDir}" Level="0"/>
<RunInstall Class="kutac.monitor.utils.Installer" Method="OfflineInstall"/>
</IfDef>

<IfNotDef Var="SourceDir">
<Log Text="SourceDir undefined - online install from GitHub" Level="0"/>
<RunInstall Class="kutac.monitor.utils.Installer" Method="DownloadFromGitHub"/>
</IfNotDef>
</Namespace>


<Namespace Name="${Namespace}" Create="no" Code="${Namespace}" Data="${Namespace}" Ensemble="">
<Log Text="Mapping SYS.History package to choosed namespace." Level="0"/>

<Configuration>
<ClassMapping From="CACHESYS" Package="SYS.History"/>
</Configuration>

<Log Text="Mapping SYS.History global to choosed namespace." Level="0"/>

<Configuration>
<GlobalMapping From="CACHESYS" Global="SYS.History"/>
</Configuration>

<Log Text="Mapping MONEXT routine to choosed namespace." Level="0"/>

<Configuration>
<RoutineMapping From="CACHESYS" Routines="MONEXT"/>
</Configuration>
</Namespace>

<If Condition='##class(Config.Namespaces).Exists("MDX2JSON")'>
<Log Text="Setup DSW settings." Level="0"/>
<RunInstall Class="kutac.monitor.utils.Installer" Method="SetDSWSettings"/>
</If>


<Log Text="Moving to configuring monitor" Level="0"/>
<RunInstall Class="kutac.monitor.utils.Installer" Method="ConfiguringMonitor"/>


<!--<Log Text="Configuring startup namespace" Level="0"/>
<RunInstall Class="kutac.monitor.utils.Installer" Method="ConfiguringClasses"/>

<Log Text="Activating Monitor Classes" Level="0"/>
<RunInstall Class="kutac.monitor.utils.Installer" Method="ActivatingingClasses"/>

<Log Text="Starting Monitor" Level="0"/>
<RunInstall Class="kutac.monitor.utils.Installer" Method="RunningMonitor"/>-->



</Manifest>
}

///  This is a method generator whose code is generated by XGL.
/// Set pVars("Namespace")="SYSMON"
/// Set pVars("SourceDir")="C:\temp\SYSMON\cls\kutac\"
/// do ##class(kutac.monitor.utils.Installer).setup(.pVars)
ClassMethod setup(ByRef pVars, pLogLevel As %Integer = 0, pInstaller As %Installer.Installer) As %Status [ CodeMode = objectgenerator, Internal ]
{
 	Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Install")
}

ClassMethod EnableDeepSee(pVars, pLogLevel, tInstaller) As %Status
{
	set namespace = tInstaller.Evaluate("${Namespace}")
	do EnableDeepSee^%SYS.cspServer("/csp/"_$ZCONVERT(namespace, "L")_"/")
	quit $$$OK
}

ClassMethod DownloadFromGitHub(pVars, pLogLevel, tInstaller) As %Status
{
    Set Namespace=tInstaller.Evaluate("${Namespace}")
    Do tInstaller.PushNS("%SYS")
    Set tSC = ..Update(Namespace, "intersystems-ru", "deepsee-sysmon-dashboards", "master")
    Do tInstaller.PopNS()
    If $$$ISERR(tSC) Throw ##class(%Installer.Exception).CreateFromStatus(tSC)
    quit $$$OK
}

ClassMethod Update(Namespace = {$Namespace}, Owner As %String = "intersystems-ru", Repository As %String = "deepsee-sysmon-dashboards", Branch As %String, Username As %String, Password As %String) As %Status
{
	Set namespace = $Namespace
 	Set SSLConfig = "GitHub"
 	Zn "%SYS"
 	Do:'##class(Security.SSLConfigs).Exists(SSLConfig) ##class(Security.SSLConfigs).Create(SSLConfig)

 	Set req=##class(%Net.HttpRequest).%New()
 	Set req.Https=1
	Set req.SSLConfiguration=SSLConfig
	Set req.Server="api.github.com"
	Set req.Location = "repos/" _ Owner _ "/" _ Repository _ "/contents" 	// as described in https://developer.github.com/v3/repos/	
	Do:$d(Branch) req.SetParam("ref",Branch) 								// if omitted the repositoryâ€™s default branch (usually master) would be used
	Do req.SetHeader("Accept","application/vnd.github.v3+json") 			// we want to receive API v3
	
	If ($d(Username) && $d(Password)) {										// supply Username and Passwor, if both are provided. GitHub accept Basic Auth
		Set req.Username = Username											// https://developer.github.com/v3/auth/
	 	Set req.Password = Password
	} 	

 	Set links = ##class(%ListOfDataTypes).%New()
 	Set st = ..ProcessDirectory("",req,.links)
 	Return:$$$ISERR(st) st
 	 	
 	Zn Namespace
	Set st = ..DownloadFiles(links,req,.list)
	Set st2 = $system.OBJ.CompileList(.list)
	Zn namespace
	
 	Return $$$ADDSC(st, st2)
}

ClassMethod ProcessDirectory(Path As %String = "", Request As %Net.HttpRequest, ByRef Links As %ListOfDataTypes) As %Status
{
	Set location = Request.Location
	Set Request.Location = Request.Location _ Path
	
	Set st = Request.Get(,,$$$NO)
	Return:$$$ISERR(st) st
	Return:(Request.HttpResponse.StatusCode = 404) $$$ERROR($$$GeneralError,"Repository doesn't exist OR you don't have access")
	Return:((Request.HttpResponse.StatusCode = 403) && (Request.HttpResponse.GetHeader("X-RATELIMIT-REMAINING")=0)) $$$ERROR($$$GeneralError,"API rate limit exceeded. Try logging in.")
 	Return:(Request.HttpResponse.StatusCode '= 200) $$$ERROR($$$GeneralError,"Received " _ Request.HttpResponse.StatusCode _ " status, expected 200")
 	
 	#dim objects As List of %ZEN.proxyObject
 	#dim obj As %ZEN.proxyObject
	Set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(Request.HttpResponse.Data,,.objects,1)
	Return:$$$ISERR(st) st
	
	For i = 1:1:objects.Count() {		
		Set obj = objects.GetAt(i)
		If (obj.type = "dir") {
			Set st = ..ProcessDirectory("/"_obj.name,Request,.Links)
			Return:$$$ISERR(st) st		
		} ElseIf (obj.type = "file") {
			Do:..IsCacheFile(obj) Links.Insert(obj."download_url")
		} Else {
			// obj.type = "symlink" or obj.type = "submodule"
		} 
	}
	Set Request.Location = location // to keep track of where in the repository tree we are
	Return $$$OK
}

ClassMethod IsCacheFile(File As %ZEN.proxyObject) As %Boolean
{
	Set extensions = ",xml,cls,csp,csr,mac,int,bas,inc,gbl,prj,obj,pkg,gof,"
	Return:($L(File.name,".")=1) 0 //no extension
	Set File.Extension = $P(File.name,".",$L(File.name,"."))
	Return $F(extensions,","_$ZCVT(File.Extension,"l")_",")
}

ClassMethod DownloadFiles(Links As %ListOfDataTypes, Request As %Net.HttpRequest, Output Items) As %Status
{
	Kill Items
	Set Request.Server = "raw.githubusercontent.com"
	Set st = $$$OK
	
	For i = 1:1:Links.Count() {
		Set streq = Request.Get($e(Links.GetAt(i),35,*)) // Remove "https://raw.githubusercontent.com/" from URL.	
		Set:$$$ISERR(streq) st=$$$ADDSC(st, streq)
 		Set stload = $system.OBJ.LoadStream(Request.HttpResponse.Data,"",.error,.items)
 		Set:$$$ISERR(stload) st=$$$ADDSC(st, stload)
 		Merge Items = items
	}
	
	Set Request.Server="api.github.com"
	Return st
}

ClassMethod ConfiguringMonitor(pVars, pLogLevel, tInstaller) As %Status
{
	Set Namespace=tInstaller.Evaluate("${Namespace}")
	Do tInstaller.PushNS("%SYS")
	write !, "Activating Monitor Classes"
	set st2 = ..ActivatingClasses()
	write !, "Starting Monitor", !
	set st3 = ..RunningMonitor()
	Do tInstaller.PopNS()
	Do tInstaller.PushNS(Namespace)
	&sql(select Name from %SYS.Task where Name = 'Rebuild SYSMON Cubes')
	if +SQLCODE 
	{
		write "Creating Task",!
		Do ##class(kutac.monitor.task.Builder).Setup()
	}
	Do tInstaller.PopNS()
	set st = $$$ADDSC(st2, st3)
	if $$$ISERR(st) Throw ##class(%Installer.Exception).CreateFromStatus(st)
    quit $$$OK
}

ClassMethod ActivatingClasses() As %Status
{
	set act = $LISTBUILD("%Monitor.System.HistoryPerf","%Monitor.System.Diskspace","%Monitor.System.License","%Monitor.System.Processes","%Monitor.System.HistorySys","%Monitor.System.Freespace","%Monitor.System.LockTable","%Monitor.System.Routines")
	set str = $LISTTOSTRING(act)
	for i = 1:1:$LISTLENGTH(act)
	{
		set cls = $PIECE(str, ",", i)
		set id = ""
		do ##class(%Monitor.ItemGroup).MetricsClassItemGroup(cls,.id)
 		s class = ##class(%Monitor.ItemGroup).%OpenId(id)
 		if '$IsObject(class)
 		{ 
 			write !,"ERROR: Class '"_cls_"' does not exist",!
 		}
 		else
 		{
	 		set class.Activated = 1
	 		set status = class.%Save()
	 		if ('status) 
	 		{
		 		w $System.Status.GetErrorText(st)
	 		}
 		}
	}
	return $$$OK
}

ClassMethod RunningMonitor() As %Status
{
	s sc = ##class(%SYS.Monitor).Stop()
	s sc1 = ##class(%SYS.Monitor).Start()
	w "System Monitor has been restarted!", !
	return sc1
}

ClassMethod OfflineInstall(ByRef pVars, pLogLevel As %Integer = 0, tInstaller As %Installer.Installer) As %Status
{
	set ns = $Namespace
	set namespace = tInstaller.Evaluate("${Namespace}")
	
	zn namespace
	do $system.OBJ.ImportDir(tInstaller.Evaluate("${SourceDir}"),"*.xml","ck",.st,1)
	
	zn ns
	quit $$$OK
}

ClassMethod SetDSWSettings(pVars, pLogLevel, tInstaller) As %Status
{
	set id = $classname()_"||DSWSettings"
	quit:(##class(%Dictionary.CompiledXData).%ExistsId(id) = 0) $$$ERROR($$$GeneralError,"You don't export DSW settings")	
	set xdata = ##class(%Dictionary.CompiledXData).%OpenId(id)
	
	set settings = xdata.Data.Read()
	if (##class(%Dictionary.CompiledMethod).%ExistsId("MDX2JSON.Users||SetConfig"))
	{
		do ##class(MDX2JSON.Users).SetConfig(tInstaller.Evaluate("${Namespace}"),settings,"DeepSeeWeb")
	}
	else{w "Please, update MDX2JSON."}
	quit $$$OK
}

XData DSWSettings [ MimeType = text/plain ]
{
{"Default":{"addons":"","app":{"language":"en","hideFolders":false,"showImages":true,"isMetro":false},"namespaces":{"tiles":{"":{"":{"row":0,"col":0,"sizeX":1,"sizeY":1,"color":2,"fontColor":0,"icon":27,"title":""},"CPU Utilization":{"row":0,"col":1,"sizeX":1,"sizeY":1,"color":1,"fontColor":0,"icon":1,"title":"CPU Utilization"},"Database Sizes":{"row":0,"col":2,"sizeX":1,"sizeY":1,"color":1,"fontColor":0,"icon":1,"title":"Database Sizes"},"Globals Performance":{"row":0,"col":3,"sizeX":3,"sizeY":3,"color":1,"fontColor":0,"icon":1,"widget":1,"title":"Globals Performance"},"Journal size history":{"row":3,"col":4,"sizeX":1,"sizeY":1,"color":1,"fontColor":0,"icon":1,"title":"Journal size history"},"LicenseHistory":{"row":3,"col":5,"sizeX":1,"sizeY":1,"color":1,"fontColor":0,"icon":1,"title":"LicenseHistory"},"Object Performance":{"row":0,"col":6,"sizeX":1,"sizeY":1,"color":1,"fontColor":0,"icon":1,"title":"Object Performance"},"Routines Performance History":{"row":0,"col":7,"sizeX":1,"sizeY":1,"color":1,"fontColor":0,"icon":1,"title":"Routines Performance History"},"Various System Parameters Performance":{"row":0,"col":8,"sizeX":1,"sizeY":1,"color":1,"fontColor":0,"icon":1,"title":"Various System Parameters Performance"},"WIJ Performance":{"row":0,"col":9,"sizeX":1,"sizeY":1,"color":1,"fontColor":0,"icon":1,"title":"WIJ Performance"}},"mobile/":{"":{"row":0,"col":0,"sizeX":1,"sizeY":1,"color":2,"fontColor":0,"icon":27,"title":""},"CPU Utilization":{"row":0,"col":1,"sizeX":1,"sizeY":1,"color":1,"fontColor":0,"icon":0,"title":"CPU Utilization"},"Database Sizes":{"row":0,"col":2,"sizeX":4,"sizeY":3,"color":1,"fontColor":0,"icon":0,"widget":1,"title":"Database Sizes"},"Globals Performance":{"row":2,"col":1,"sizeX":1,"sizeY":1,"color":1,"fontColor":0,"icon":0,"title":"Globals Performance"},"Journal size history":{"row":1,"col":1,"sizeX":1,"sizeY":1,"color":1,"fontColor":0,"icon":0,"title":"Journal size history"},"LicenseHistory":{"row":0,"col":9,"sizeX":1,"sizeY":1,"color":1,"fontColor":0,"icon":0,"title":"LicenseHistory"},"Object Performance":{"row":0,"col":6,"sizeX":1,"sizeY":1,"color":1,"fontColor":0,"icon":0,"title":"Object Performance"},"Routines Performance History":{"row":0,"col":8,"sizeX":1,"sizeY":1,"color":1,"fontColor":0,"icon":0,"title":"Routines Performance History"},"Various System Parameters Performance":{"row":1,"col":6,"sizeX":4,"sizeY":2,"color":1,"fontColor":0,"icon":0,"title":"Various System Parameters Performance","widget":0},"WIJ Performance":{"row":0,"col":7,"sizeX":1,"sizeY":1,"color":1,"fontColor":0,"icon":0,"title":"WIJ Performance"}}},"widgets":{"mobile/DBSizes.dashboard":{"w2":{"isLegend":true,"showValues":false,"isTop":false,"showZero":false,"sizeY":5,"sizeX":5}}}}}}
}

}

